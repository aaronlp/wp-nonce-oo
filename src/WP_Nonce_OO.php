<?php 
namespace apwd\WP_Nonce_OO;
 
class WP_Nonce_OO {
    
    const opt_key_prefix = 'apwd_nonce_';
    const default_expiry = 3600;   //1 hour
 
    function __construct($action) {
        $this->action = $action;
        $this->user_id = get_current_user_id();
        $this->expiry_time = $this->setNonceExpiry(self::$default_expiry);
        $this->nonce = null;
        $this->nonce_expiry = null;
    }
    
   /**
    * Allows setting of a new default expiry time for nonce/s generated by subsequent calls
    * to $this->createNonce()
    *   
    * @param int $seconds Number of seconds to set the value to.
    * @return bool True on success, false on failure
   */
    public function setNonceExpiry($seconds) {
        if (!is_int($seconds)) {
            return false;
        }
        $this->expiry_time = $seconds;
        return true;
    }
    
    /**
    * Create a new nonce, save it for future use and return it
    * 
    * @return string generated nonce
   */
    public function createNonce() {
        $salt = wp_salt('nonce');
        $time = microtime(true);
        
        $string = $salt . $this->action . $time;
        $string .= $this->user_id ? $this->user_id : '';
        
        $this->nonce = sha1($string);
        $this->nonce_expiry = time() + $this->default_expiry;
        
        $this->saveNonce();
        return $this->nonce;
        
    }
    
    /**
    * Create a new nonce, save it for future use and provide a hidden form field
    * 
    * @param string $echo whether the HTML output should be echoed or returned
    * @return string|bool Generated HTML string or true on echo
   */
    public function outputNonce($echo = false) {
        $nonce = $this->createNonce();
        $output = "<input type='hidden' name='$this->action' value='$this->nonce' />";
        if ($echo) {
            echo $output;
            return true;
        } 
        return $output;
    }
    
    
    /**
    * 'Use' a nonce by checking it exists, is valid and delete it so it 
    * can't be used again.
    *
    * @param string $nonce nonce key to be used
    * @return bool True if nonce was valid for action and user, false if not
   */
    public function useNonce($nonce) {
        $key = self::opt_key_prefix . "_" . $nonce;
        $option = get_option($key);
        if (!$option) {
            return false;
        }
        
        $is_valid = false;
        if (time() < $option['expiry'] && 
            $this->user_id === $option['user_id'] &&
            $this->action === $option['action']) {
                $is_valid = true;
        }   
        $this->deleteNonce($nonce);
        return $is_valid;
    }
    
    /**
    * Persist a nonce to the database for future use
    *
    * @return bool True if nonce was saved, false if not
   */
    protected function saveNonce() {
        $option = array('expiry' => $this->nonce_expiry,
                        'user_id' => $this->user_id,
                        'action' => $this->action);
        
        return add_option(self::opt_key_prefix . '_' . $this->nonce, $option);
    }
    
    /**
    * Delete persistence of a nonce
    * 
    * @param string $nonce nonce key to be deleted
    * @return bool True on success, false on failure
   */
    protected function deleteNonce($nonce) {
        $key = self::opt_key_prefix . "_" . $nonce;
        return delete_option($key);    
    }
    
 
}
